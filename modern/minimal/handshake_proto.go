// Generated by protocol_generator; DO NOT EDIT
// protocol_generator -file=handshake.go -direction=serverbound -state=handshake -package=modern

package modern

import (
	"encoding/binary"
	"github.com/kurafuto/kyubu/packets"
	"io"
)

func init() {
	packets.Register(packets.Handshake, packets.ServerBound, 0x00, func() packets.Packet { return &Handshake{} })
}

func (t *Handshake) Id() byte {
	return 0x00 // 0
}

func (t *Handshake) Encode(ww io.Writer) (err error) {
	tmp0 := make([]byte, binary.MaxVarintLen64)
	tmp1 := packets.PutVarint(tmp0, int64(t.ProtocolVersion))
	if err = binary.Write(ww, binary.BigEndian, tmp0[:tmp1]); err != nil {
		return err
	}

	if err = packets.WriteString(ww, t.Address); err != nil {
		return err
	}
	if err = binary.Write(ww, binary.BigEndian, t.Port); err != nil {
		return err
	}

	tmp2 := make([]byte, binary.MaxVarintLen64)
	tmp3 := packets.PutVarint(tmp2, int64(t.NextState))
	if err = binary.Write(ww, binary.BigEndian, tmp2[:tmp3]); err != nil {
		return err
	}

	return
}

func (t *Handshake) Decode(rr io.Reader) (err error) {
	tmp0, err := packets.ReadVarint(rr)
	if err != nil {
		return err
	}
	t.ProtocolVersion = packets.VarInt(tmp0)

	if t.Address, err = packets.ReadString(rr); err != nil {
		return err
	}
	if err = binary.Read(rr, binary.BigEndian, t.Port); err != nil {
		return err
	}

	tmp1, err := packets.ReadVarint(rr)
	if err != nil {
		return err
	}
	t.NextState = packets.VarInt(tmp1)

	return
}
