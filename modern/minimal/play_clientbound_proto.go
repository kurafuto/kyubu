// Generated by protocol_generator; DO NOT EDIT
// protocol_generator -file=play_clientbound.go -direction=clientbound -state=play -package=modern

package modern

import (
	"encoding/binary"
	"encoding/json"
	"fmt"
	"github.com/kurafuto/kyubu/packets"
	"io"
	"io/ioutil"
)

func init() {
	packets.Register(packets.Play, packets.ClientBound, 0x01, func() packets.Packet { return &JoinGame{} })
	packets.Register(packets.Play, packets.ClientBound, 0x02, func() packets.Packet { return &ServerMessage{} })
	packets.Register(packets.Play, packets.ClientBound, 0x07, func() packets.Packet { return &Respawn{} })
	packets.Register(packets.Play, packets.ClientBound, 0x38, func() packets.Packet { return &PlayerListItem{} })
	packets.Register(packets.Play, packets.ClientBound, 0x3a, func() packets.Packet { return &ServerTabComplete{} })
	packets.Register(packets.Play, packets.ClientBound, 0x3b, func() packets.Packet { return &ScoreboardObjective{} })
	packets.Register(packets.Play, packets.ClientBound, 0x3c, func() packets.Packet { return &UpdateScore{} })
	packets.Register(packets.Play, packets.ClientBound, 0x3d, func() packets.Packet { return &ShowScoreboard{} })
	packets.Register(packets.Play, packets.ClientBound, 0x3e, func() packets.Packet { return &Teams{} })
	packets.Register(packets.Play, packets.ClientBound, 0x3f, func() packets.Packet { return &ServerPluginMessage{} })
	packets.Register(packets.Play, packets.ClientBound, 0x40, func() packets.Packet { return &Disconnect{} })
	packets.Register(packets.Play, packets.ClientBound, 0x46, func() packets.Packet { return &SetCompression{} })
}

func (t *JoinGame) Id() byte {
	return 0x01 // 1
}

func (t *JoinGame) Encode(ww io.Writer) (err error) {
	if err = binary.Write(ww, binary.BigEndian, t.EntityID); err != nil {
		return err
	}

	if err = binary.Write(ww, binary.BigEndian, t.Gamemode); err != nil {
		return err
	}

	if err = binary.Write(ww, binary.BigEndian, t.Dimension); err != nil {
		return err
	}

	if err = binary.Write(ww, binary.BigEndian, t.Difficulty); err != nil {
		return err
	}

	if err = binary.Write(ww, binary.BigEndian, t.MaxPlayers); err != nil {
		return err
	}

	if err = packets.WriteString(ww, t.LevelType); err != nil {
		return err
	}
	if err = packets.WriteBool(ww, t.ReducedDebug); err != nil {
		return err
	}
	return
}

func (t *JoinGame) Decode(rr io.Reader) (err error) {
	if err = binary.Read(rr, binary.BigEndian, t.EntityID); err != nil {
		return err
	}

	if err = binary.Read(rr, binary.BigEndian, t.Gamemode); err != nil {
		return err
	}

	if err = binary.Read(rr, binary.BigEndian, t.Dimension); err != nil {
		return err
	}

	if err = binary.Read(rr, binary.BigEndian, t.Difficulty); err != nil {
		return err
	}

	if err = binary.Read(rr, binary.BigEndian, t.MaxPlayers); err != nil {
		return err
	}

	if t.LevelType, err = packets.ReadString(rr); err != nil {
		return err
	}
	if t.ReducedDebug, err = packets.ReadBool(rr); err != nil {
		return err
	}
	return
}

func (t *ServerMessage) Id() byte {
	return 0x02 // 2
}

func (t *ServerMessage) Encode(ww io.Writer) (err error) {
	var tmp0 []byte
	if tmp0, err = json.Marshal(&t.Data); err != nil {
		return err
	}
	if err = packets.WriteString(ww, string(tmp0)); err != nil {
		return err
	}
	if err = binary.Write(ww, binary.BigEndian, t.Position); err != nil {
		return err
	}

	return
}

func (t *ServerMessage) Decode(rr io.Reader) (err error) {
	var tmp0 string
	if tmp0, err = packets.ReadString(rr); err != nil {
		return err
	}
	if err = json.Unmarshal([]byte(tmp0), &t.Data); err != nil {
		return err
	}
	if err = binary.Read(rr, binary.BigEndian, t.Position); err != nil {
		return err
	}

	return
}

func (t *Respawn) Id() byte {
	return 0x07 // 7
}

func (t *Respawn) Encode(ww io.Writer) (err error) {
	if err = binary.Write(ww, binary.BigEndian, t.Dimension); err != nil {
		return err
	}

	if err = binary.Write(ww, binary.BigEndian, t.Difficulty); err != nil {
		return err
	}

	if err = binary.Write(ww, binary.BigEndian, t.Gamemode); err != nil {
		return err
	}

	if err = packets.WriteString(ww, t.LevelType); err != nil {
		return err
	}
	return
}

func (t *Respawn) Decode(rr io.Reader) (err error) {
	if err = binary.Read(rr, binary.BigEndian, t.Dimension); err != nil {
		return err
	}

	if err = binary.Read(rr, binary.BigEndian, t.Difficulty); err != nil {
		return err
	}

	if err = binary.Read(rr, binary.BigEndian, t.Gamemode); err != nil {
		return err
	}

	if t.LevelType, err = packets.ReadString(rr); err != nil {
		return err
	}
	return
}

func (t *PlayerListItem) Id() byte {
	return 0x38 // 56
}

func (t *PlayerListItem) Encode(ww io.Writer) (err error) {
	tmp0 := make([]byte, binary.MaxVarintLen64)
	tmp1 := packets.PutVarint(tmp0, int64(t.Action))
	if err = binary.Write(ww, binary.BigEndian, tmp0[:tmp1]); err != nil {
		return err
	}

	tmp2 := make([]byte, binary.MaxVarintLen64)
	tmp3 := packets.PutVarint(tmp2, int64(t.NumPlayers))
	if err = binary.Write(ww, binary.BigEndian, tmp2[:tmp3]); err != nil {
		return err
	}

	tmp4 := make([]byte, binary.MaxVarintLen64)
	tmp5 := packets.PutVarint(tmp4, int64(len(t.Players)))
	if err = binary.Write(ww, binary.BigEndian, tmp4[:tmp5]); err != nil {
		return err
	}

	for tmp6 := range t.Players {
		if err = binary.Write(ww, binary.BigEndian, t.Players[tmp6].UUID[:]); err != nil {
			return err
		}

		if err = packets.WriteString(ww, t.Players[tmp6].Name); err != nil {
			return err
		}
		tmp7 := make([]byte, binary.MaxVarintLen64)
		tmp8 := packets.PutVarint(tmp7, int64(len(t.Players[tmp6].Properties)))
		if err = binary.Write(ww, binary.BigEndian, tmp7[:tmp8]); err != nil {
			return err
		}

		for tmp9 := range t.Players[tmp6].Properties {
			if err = packets.WriteString(ww, t.Players[tmp6].Properties[tmp9].Name); err != nil {
				return err
			}
			if err = packets.WriteString(ww, t.Players[tmp6].Properties[tmp9].Value); err != nil {
				return err
			}
			if err = packets.WriteBool(ww, t.Players[tmp6].Properties[tmp9].Signed); err != nil {
				return err
			}
			if t.Players[tmp6].Properties[tmp9].Signed {
				if err = packets.WriteString(ww, t.Players[tmp6].Properties[tmp9].Signature); err != nil {
					return err
				}
			}
		}
		tmp10 := make([]byte, binary.MaxVarintLen64)
		tmp11 := packets.PutVarint(tmp10, int64(t.Players[tmp6].Gamemode))
		if err = binary.Write(ww, binary.BigEndian, tmp10[:tmp11]); err != nil {
			return err
		}

		tmp12 := make([]byte, binary.MaxVarintLen64)
		tmp13 := packets.PutVarint(tmp12, int64(t.Players[tmp6].Ping))
		if err = binary.Write(ww, binary.BigEndian, tmp12[:tmp13]); err != nil {
			return err
		}

		if err = packets.WriteBool(ww, t.Players[tmp6].HasDisplayName); err != nil {
			return err
		}
		if t.Players[tmp6].HasDisplayName {
			var tmp14 []byte
			if tmp14, err = json.Marshal(&t.Players[tmp6].DisplayName); err != nil {
				return err
			}
			if err = packets.WriteString(ww, string(tmp14)); err != nil {
				return err
			}
		}
	}
	return
}

func (t *PlayerListItem) Decode(rr io.Reader) (err error) {
	tmp0, err := packets.ReadVarint(rr)
	if err != nil {
		return err
	}
	t.Action = packets.VarInt(tmp0)

	tmp1, err := packets.ReadVarint(rr)
	if err != nil {
		return err
	}
	t.NumPlayers = packets.VarInt(tmp1)

	var tmp2 packets.VarInt
	tmp3, err := packets.ReadVarint(rr)
	if err != nil {
		return err
	}
	tmp2 = packets.VarInt(tmp3)

	if tmp2 < 0 {
		return fmt.Errorf("negative array size: %d < 0", tmp2)
	}
	t.Players = make([]Player, tmp2)
	for tmp4 := range t.Players {
		if err = binary.Read(rr, binary.BigEndian, t.Players[tmp4].UUID); err != nil {
			return err
		}

		if t.Players[tmp4].Name, err = packets.ReadString(rr); err != nil {
			return err
		}
		var tmp5 packets.VarInt
		tmp6, err := packets.ReadVarint(rr)
		if err != nil {
			return err
		}
		tmp5 = packets.VarInt(tmp6)

		if tmp5 < 0 {
			return fmt.Errorf("negative array size: %d < 0", tmp5)
		}
		t.Players[tmp4].Properties = make([]Property, tmp5)
		for tmp7 := range t.Players[tmp4].Properties {
			if t.Players[tmp4].Properties[tmp7].Name, err = packets.ReadString(rr); err != nil {
				return err
			}
			if t.Players[tmp4].Properties[tmp7].Value, err = packets.ReadString(rr); err != nil {
				return err
			}
			if t.Players[tmp4].Properties[tmp7].Signed, err = packets.ReadBool(rr); err != nil {
				return err
			}
			if t.Players[tmp4].Properties[tmp7].Signed {
				if t.Players[tmp4].Properties[tmp7].Signature, err = packets.ReadString(rr); err != nil {
					return err
				}
			}
		}
		tmp8, err := packets.ReadVarint(rr)
		if err != nil {
			return err
		}
		t.Players[tmp4].Gamemode = packets.VarInt(tmp8)

		tmp9, err := packets.ReadVarint(rr)
		if err != nil {
			return err
		}
		t.Players[tmp4].Ping = packets.VarInt(tmp9)

		if t.Players[tmp4].HasDisplayName, err = packets.ReadBool(rr); err != nil {
			return err
		}
		if t.Players[tmp4].HasDisplayName {
			var tmp10 string
			if tmp10, err = packets.ReadString(rr); err != nil {
				return err
			}
			if err = json.Unmarshal([]byte(tmp10), &t.Players[tmp4].DisplayName); err != nil {
				return err
			}
		}
	}
	return
}

func (t *ServerTabComplete) Id() byte {
	return 0x3a // 58
}

func (t *ServerTabComplete) Encode(ww io.Writer) (err error) {
	tmp0 := make([]byte, binary.MaxVarintLen64)
	tmp1 := packets.PutVarint(tmp0, int64(len(t.Matches)))
	if err = binary.Write(ww, binary.BigEndian, tmp0[:tmp1]); err != nil {
		return err
	}

	for tmp2 := range t.Matches {
		if err = packets.WriteString(ww, t.Matches[tmp2]); err != nil {
			return err
		}
	}
	return
}

func (t *ServerTabComplete) Decode(rr io.Reader) (err error) {
	var tmp0 packets.VarInt
	tmp1, err := packets.ReadVarint(rr)
	if err != nil {
		return err
	}
	tmp0 = packets.VarInt(tmp1)

	if tmp0 < 0 {
		return fmt.Errorf("negative array size: %d < 0", tmp0)
	}
	t.Matches = make([]string, tmp0)
	for tmp2 := range t.Matches {
		if t.Matches[tmp2], err = packets.ReadString(rr); err != nil {
			return err
		}
	}
	return
}

func (t *ScoreboardObjective) Id() byte {
	return 0x3b // 59
}

func (t *ScoreboardObjective) Encode(ww io.Writer) (err error) {
	if err = packets.WriteString(ww, t.Name); err != nil {
		return err
	}
	if err = binary.Write(ww, binary.BigEndian, t.Mode); err != nil {
		return err
	}

	if t.Mode == 0 || t.Mode == 2 {
		if err = packets.WriteString(ww, t.Value); err != nil {
			return err
		}
	}
	if t.Mode == 0 || t.Mode == 2 {
		if err = packets.WriteString(ww, t.Type); err != nil {
			return err
		}
	}
	return
}

func (t *ScoreboardObjective) Decode(rr io.Reader) (err error) {
	if t.Name, err = packets.ReadString(rr); err != nil {
		return err
	}
	if err = binary.Read(rr, binary.BigEndian, t.Mode); err != nil {
		return err
	}

	if t.Mode == 0 || t.Mode == 2 {
		if t.Value, err = packets.ReadString(rr); err != nil {
			return err
		}
	}
	if t.Mode == 0 || t.Mode == 2 {
		if t.Type, err = packets.ReadString(rr); err != nil {
			return err
		}
	}
	return
}

func (t *UpdateScore) Id() byte {
	return 0x3c // 60
}

func (t *UpdateScore) Encode(ww io.Writer) (err error) {
	if err = packets.WriteString(ww, t.Name); err != nil {
		return err
	}
	if err = binary.Write(ww, binary.BigEndian, t.Action); err != nil {
		return err
	}

	if err = packets.WriteString(ww, t.ObjectiveName); err != nil {
		return err
	}
	if t.Action != 1 {
		tmp0 := make([]byte, binary.MaxVarintLen64)
		tmp1 := packets.PutVarint(tmp0, int64(t.Value))
		if err = binary.Write(ww, binary.BigEndian, tmp0[:tmp1]); err != nil {
			return err
		}

	}
	return
}

func (t *UpdateScore) Decode(rr io.Reader) (err error) {
	if t.Name, err = packets.ReadString(rr); err != nil {
		return err
	}
	if err = binary.Read(rr, binary.BigEndian, t.Action); err != nil {
		return err
	}

	if t.ObjectiveName, err = packets.ReadString(rr); err != nil {
		return err
	}
	if t.Action != 1 {
		tmp0, err := packets.ReadVarint(rr)
		if err != nil {
			return err
		}
		t.Value = packets.VarInt(tmp0)

	}
	return
}

func (t *ShowScoreboard) Id() byte {
	return 0x3d // 61
}

func (t *ShowScoreboard) Encode(ww io.Writer) (err error) {
	if err = binary.Write(ww, binary.BigEndian, t.Position); err != nil {
		return err
	}

	if err = packets.WriteString(ww, t.Name); err != nil {
		return err
	}
	return
}

func (t *ShowScoreboard) Decode(rr io.Reader) (err error) {
	if err = binary.Read(rr, binary.BigEndian, t.Position); err != nil {
		return err
	}

	if t.Name, err = packets.ReadString(rr); err != nil {
		return err
	}
	return
}

func (t *Teams) Id() byte {
	return 0x3e // 62
}

func (t *Teams) Encode(ww io.Writer) (err error) {
	if err = packets.WriteString(ww, t.Name); err != nil {
		return err
	}
	if err = binary.Write(ww, binary.BigEndian, t.Mode); err != nil {
		return err
	}

	if t.Mode == 0 || t.Mode == 2 {
		if err = packets.WriteString(ww, t.Display); err != nil {
			return err
		}
	}
	if t.Mode == 0 || t.Mode == 2 {
		if err = packets.WriteString(ww, t.Prefix); err != nil {
			return err
		}
	}
	if t.Mode == 0 || t.Mode == 2 {
		if err = packets.WriteString(ww, t.Suffix); err != nil {
			return err
		}
	}
	if t.Mode == 0 || t.Mode == 2 {
		if err = binary.Write(ww, binary.BigEndian, t.FriendlyFire); err != nil {
			return err
		}

	}
	if t.Mode == 0 || t.Mode == 2 {
		if err = packets.WriteString(ww, t.NameTagVisibility); err != nil {
			return err
		}
	}
	if t.Mode == 0 || t.Mode == 2 {
		if err = binary.Write(ww, binary.BigEndian, t.Color); err != nil {
			return err
		}

	}
	if t.Mode == 0 || t.Mode == 3 || t.Mode == 4 {
		tmp0 := make([]byte, binary.MaxVarintLen64)
		tmp1 := packets.PutVarint(tmp0, int64(len(t.Players)))
		if err = binary.Write(ww, binary.BigEndian, tmp0[:tmp1]); err != nil {
			return err
		}

		for tmp2 := range t.Players {
			if err = packets.WriteString(ww, t.Players[tmp2]); err != nil {
				return err
			}
		}
	}
	return
}

func (t *Teams) Decode(rr io.Reader) (err error) {
	if t.Name, err = packets.ReadString(rr); err != nil {
		return err
	}
	if err = binary.Read(rr, binary.BigEndian, t.Mode); err != nil {
		return err
	}

	if t.Mode == 0 || t.Mode == 2 {
		if t.Display, err = packets.ReadString(rr); err != nil {
			return err
		}
	}
	if t.Mode == 0 || t.Mode == 2 {
		if t.Prefix, err = packets.ReadString(rr); err != nil {
			return err
		}
	}
	if t.Mode == 0 || t.Mode == 2 {
		if t.Suffix, err = packets.ReadString(rr); err != nil {
			return err
		}
	}
	if t.Mode == 0 || t.Mode == 2 {
		if err = binary.Read(rr, binary.BigEndian, t.FriendlyFire); err != nil {
			return err
		}

	}
	if t.Mode == 0 || t.Mode == 2 {
		if t.NameTagVisibility, err = packets.ReadString(rr); err != nil {
			return err
		}
	}
	if t.Mode == 0 || t.Mode == 2 {
		if err = binary.Read(rr, binary.BigEndian, t.Color); err != nil {
			return err
		}

	}
	if t.Mode == 0 || t.Mode == 3 || t.Mode == 4 {
		var tmp0 packets.VarInt
		tmp1, err := packets.ReadVarint(rr)
		if err != nil {
			return err
		}
		tmp0 = packets.VarInt(tmp1)

		if tmp0 < 0 {
			return fmt.Errorf("negative array size: %d < 0", tmp0)
		}
		t.Players = make([]string, tmp0)
		for tmp2 := range t.Players {
			if t.Players[tmp2], err = packets.ReadString(rr); err != nil {
				return err
			}
		}
	}
	return
}

func (t *ServerPluginMessage) Id() byte {
	return 0x3f // 63
}

func (t *ServerPluginMessage) Encode(ww io.Writer) (err error) {
	if err = packets.WriteString(ww, t.Channel); err != nil {
		return err
	}
	if _, err = ww.Write(t.Data); err != nil {
		return err
	}
	return
}

func (t *ServerPluginMessage) Decode(rr io.Reader) (err error) {
	if t.Channel, err = packets.ReadString(rr); err != nil {
		return err
	}
	if t.Data, err = ioutil.ReadAll(rr); err != nil {
		return
	}
	return
}

func (t *Disconnect) Id() byte {
	return 0x40 // 64
}

func (t *Disconnect) Encode(ww io.Writer) (err error) {
	var tmp0 []byte
	if tmp0, err = json.Marshal(&t.Reason); err != nil {
		return err
	}
	if err = packets.WriteString(ww, string(tmp0)); err != nil {
		return err
	}
	return
}

func (t *Disconnect) Decode(rr io.Reader) (err error) {
	var tmp0 string
	if tmp0, err = packets.ReadString(rr); err != nil {
		return err
	}
	if err = json.Unmarshal([]byte(tmp0), &t.Reason); err != nil {
		return err
	}
	return
}

func (t *SetCompression) Id() byte {
	return 0x46 // 70
}

func (t *SetCompression) Encode(ww io.Writer) (err error) {
	tmp0 := make([]byte, binary.MaxVarintLen64)
	tmp1 := packets.PutVarint(tmp0, int64(t.Threshold))
	if err = binary.Write(ww, binary.BigEndian, tmp0[:tmp1]); err != nil {
		return err
	}

	return
}

func (t *SetCompression) Decode(rr io.Reader) (err error) {
	tmp0, err := packets.ReadVarint(rr)
	if err != nil {
		return err
	}
	t.Threshold = packets.VarInt(tmp0)

	return
}
