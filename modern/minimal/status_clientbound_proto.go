// Generated by protocol_generator; DO NOT EDIT
// protocol_generator -file=status_clientbound.go -direction=serverbound -state=status -package=modern

package modern

import (
	"encoding/binary"
	"encoding/json"
	"github.com/kurafuto/kyubu/packets"
	"io"
)

func init() {
	packets.Register(packets.Status, packets.ServerBound, 0x00, func() packets.Packet { return &StatusResponse{} })
	packets.Register(packets.Status, packets.ServerBound, 0x01, func() packets.Packet { return &StatusPong{} })
}

func (t *StatusResponse) Id() byte {
	return 0x00 // 0
}

func (t *StatusResponse) Encode(ww io.Writer) (err error) {
	var tmp0 []byte
	if tmp0, err = json.Marshal(&t.Status); err != nil {
		return err
	}
	if err = packets.WriteString(ww, string(tmp0)); err != nil {
		return err
	}
	return
}

func (t *StatusResponse) Decode(rr io.Reader) (err error) {
	var tmp0 string
	if tmp0, err = packets.ReadString(rr); err != nil {
		return err
	}
	if err = json.Unmarshal([]byte(tmp0), &t.Status); err != nil {
		return err
	}
	return
}

func (t *StatusPong) Id() byte {
	return 0x01 // 1
}

func (t *StatusPong) Encode(ww io.Writer) (err error) {
	if err = binary.Write(ww, binary.BigEndian, t.Time); err != nil {
		return err
	}

	return
}

func (t *StatusPong) Decode(rr io.Reader) (err error) {
	if err = binary.Read(rr, binary.BigEndian, t.Time); err != nil {
		return err
	}

	return
}
