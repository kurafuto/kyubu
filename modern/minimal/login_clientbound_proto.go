// Generated by protocol_generator; DO NOT EDIT
// protocol_generator -file=login_clientbound.go -direction=clientbound -state=login -package=modern

package modern

import (
	"encoding/binary"
	"encoding/json"
	"fmt"
	"github.com/kurafuto/kyubu/packets"
	"io"
)

func init() {
	packets.Register(packets.Login, packets.ClientBound, 0x00, func() packets.Packet { return &LoginDisconnect{} })
	packets.Register(packets.Login, packets.ClientBound, 0x01, func() packets.Packet { return &EncryptionRequest{} })
	packets.Register(packets.Login, packets.ClientBound, 0x02, func() packets.Packet { return &LoginSuccess{} })
	packets.Register(packets.Login, packets.ClientBound, 0x03, func() packets.Packet { return &SetInitialCompression{} })
}

func (t *LoginDisconnect) Id() byte {
	return 0x00 // 0
}

func (t *LoginDisconnect) Encode(ww io.Writer) (err error) {
	var tmp0 []byte
	if tmp0, err = json.Marshal(&t.Reason); err != nil {
		return err
	}
	if err = packets.WriteString(ww, string(tmp0)); err != nil {
		return err
	}
	return
}

func (t *LoginDisconnect) Decode(rr io.Reader) (err error) {
	var tmp0 string
	if tmp0, err = packets.ReadString(rr); err != nil {
		return err
	}
	if err = json.Unmarshal([]byte(tmp0), &t.Reason); err != nil {
		return err
	}
	return
}

func (t *EncryptionRequest) Id() byte {
	return 0x01 // 1
}

func (t *EncryptionRequest) Encode(ww io.Writer) (err error) {
	if err = packets.WriteString(ww, t.ServerID); err != nil {
		return err
	}
	tmp0 := make([]byte, binary.MaxVarintLen64)
	tmp1 := packets.PutVarint(tmp0, int64(len(t.PublicKey)))
	if err = binary.Write(ww, binary.BigEndian, tmp0[:tmp1]); err != nil {
		return err
	}

	if _, err = ww.Write(t.PublicKey); err != nil {
		return err
	}
	tmp2 := make([]byte, binary.MaxVarintLen64)
	tmp3 := packets.PutVarint(tmp2, int64(len(t.VerifyToken)))
	if err = binary.Write(ww, binary.BigEndian, tmp2[:tmp3]); err != nil {
		return err
	}

	if _, err = ww.Write(t.VerifyToken); err != nil {
		return err
	}
	return
}

func (t *EncryptionRequest) Decode(rr io.Reader) (err error) {
	if t.ServerID, err = packets.ReadString(rr); err != nil {
		return err
	}
	var tmp0 packets.VarInt
	tmp1, err := packets.ReadVarint(rr)
	if err != nil {
		return err
	}
	tmp0 = packets.VarInt(tmp1)

	if tmp0 < 0 {
		return fmt.Errorf("negative array size: %d < 0", tmp0)
	}
	t.PublicKey = make([]byte, tmp0)
	if _, err = rr.Read(t.PublicKey); err != nil {
		return err
	}
	var tmp2 packets.VarInt
	tmp3, err := packets.ReadVarint(rr)
	if err != nil {
		return err
	}
	tmp2 = packets.VarInt(tmp3)

	if tmp2 < 0 {
		return fmt.Errorf("negative array size: %d < 0", tmp2)
	}
	t.VerifyToken = make([]byte, tmp2)
	if _, err = rr.Read(t.VerifyToken); err != nil {
		return err
	}
	return
}

func (t *LoginSuccess) Id() byte {
	return 0x02 // 2
}

func (t *LoginSuccess) Encode(ww io.Writer) (err error) {
	if err = packets.WriteString(ww, t.UUID); err != nil {
		return err
	}
	if err = packets.WriteString(ww, t.Username); err != nil {
		return err
	}
	return
}

func (t *LoginSuccess) Decode(rr io.Reader) (err error) {
	if t.UUID, err = packets.ReadString(rr); err != nil {
		return err
	}
	if t.Username, err = packets.ReadString(rr); err != nil {
		return err
	}
	return
}

func (t *SetInitialCompression) Id() byte {
	return 0x03 // 3
}

func (t *SetInitialCompression) Encode(ww io.Writer) (err error) {
	tmp0 := make([]byte, binary.MaxVarintLen64)
	tmp1 := packets.PutVarint(tmp0, int64(t.Threshold))
	if err = binary.Write(ww, binary.BigEndian, tmp0[:tmp1]); err != nil {
		return err
	}

	return
}

func (t *SetInitialCompression) Decode(rr io.Reader) (err error) {
	tmp0, err := packets.ReadVarint(rr)
	if err != nil {
		return err
	}
	t.Threshold = packets.VarInt(tmp0)

	return
}
