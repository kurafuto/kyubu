// Generated by protocol_generator; DO NOT EDIT
// protocol_generator -file=play_serverbound.go -direction=serverbound -state=play -package=modern

package modern

import (
	"encoding/binary"
	"github.com/kurafuto/kyubu/packets"
	"io"
	"io/ioutil"
)

func init() {
	packets.Register(packets.Play, packets.ServerBound, 0x01, func() packets.Packet { return &ClientMessage{} })
	packets.Register(packets.Play, packets.ServerBound, 0x14, func() packets.Packet { return &ClientTabComplete{} })
	packets.Register(packets.Play, packets.ServerBound, 0x16, func() packets.Packet { return &ClientStatus{} })
	packets.Register(packets.Play, packets.ServerBound, 0x17, func() packets.Packet { return &ClientPluginMessage{} })
}

func (t *ClientMessage) Id() byte {
	return 0x01 // 1
}

func (t *ClientMessage) Encode(ww io.Writer) (err error) {
	if err = packets.WriteString(ww, t.Message); err != nil {
		return err
	}
	return
}

func (t *ClientMessage) Decode(rr io.Reader) (err error) {
	if t.Message, err = packets.ReadString(rr); err != nil {
		return err
	}
	return
}

func (t *ClientTabComplete) Id() byte {
	return 0x14 // 20
}

func (t *ClientTabComplete) Encode(ww io.Writer) (err error) {
	if err = packets.WriteString(ww, t.Text); err != nil {
		return err
	}
	if err = packets.WriteBool(ww, t.HasPosition); err != nil {
		return err
	}
	if t.HasPosition {
		if err = binary.Write(ww, binary.BigEndian, t.LookedAtBlock); err != nil {
			return err
		}

	}
	return
}

func (t *ClientTabComplete) Decode(rr io.Reader) (err error) {
	if t.Text, err = packets.ReadString(rr); err != nil {
		return err
	}
	if t.HasPosition, err = packets.ReadBool(rr); err != nil {
		return err
	}
	if t.HasPosition {
		if err = binary.Read(rr, binary.BigEndian, t.LookedAtBlock); err != nil {
			return err
		}

	}
	return
}

func (t *ClientStatus) Id() byte {
	return 0x16 // 22
}

func (t *ClientStatus) Encode(ww io.Writer) (err error) {
	tmp0 := make([]byte, binary.MaxVarintLen64)
	tmp1 := packets.PutVarint(tmp0, int64(t.ActionID))
	if err = binary.Write(ww, binary.BigEndian, tmp0[:tmp1]); err != nil {
		return err
	}

	return
}

func (t *ClientStatus) Decode(rr io.Reader) (err error) {
	tmp0, err := packets.ReadVarint(rr)
	if err != nil {
		return err
	}
	t.ActionID = packets.VarInt(tmp0)

	return
}

func (t *ClientPluginMessage) Id() byte {
	return 0x17 // 23
}

func (t *ClientPluginMessage) Encode(ww io.Writer) (err error) {
	if err = packets.WriteString(ww, t.Channel); err != nil {
		return err
	}
	if _, err = ww.Write(t.Data); err != nil {
		return err
	}
	return
}

func (t *ClientPluginMessage) Decode(rr io.Reader) (err error) {
	if t.Channel, err = packets.ReadString(rr); err != nil {
		return err
	}
	if t.Data, err = ioutil.ReadAll(rr); err != nil {
		return
	}
	return
}
